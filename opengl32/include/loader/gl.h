#pragma once

#include <Windows.h>
#include <gl/GL.h>

namespace gl
{
	bool initialize(HMODULE hModule);

	void WINAPI hk_Accum(GLenum op, GLfloat value);
	void WINAPI hk_AlphaFunc(GLenum func, GLclampf ref);
	GLboolean WINAPI hk_AreTexturesResident(GLsizei n, const GLuint* textures, GLboolean* residences);
	void WINAPI hk_ArrayElement(GLint i);
	void WINAPI hk_Begin(GLenum mode);
	void WINAPI hk_BindTexture(GLenum target, GLuint texture);
	void WINAPI hk_Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte* bitmap);
	void WINAPI hk_BlendFunc(GLenum sfactor, GLenum dfactor);
	void WINAPI hk_CallList(GLuint list);
	void WINAPI hk_CallLists(GLsizei n, GLenum type, const GLvoid* lists);
	void WINAPI hk_Clear(GLbitfield mask);
	void WINAPI hk_ClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	void WINAPI hk_ClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
	void WINAPI hk_ClearDepth(GLclampd depth);
	void WINAPI hk_ClearIndex(GLfloat c);
	void WINAPI hk_ClearStencil(GLint s);
	void WINAPI hk_ClipPlane(GLenum plane, const GLdouble* equation);
	void WINAPI hk_Color3b(GLbyte red, GLbyte green, GLbyte blue);
	void WINAPI hk_Color3bv(const GLbyte* v);
	void WINAPI hk_Color3d(GLdouble red, GLdouble green, GLdouble blue);
	void WINAPI hk_Color3dv(const GLdouble* v);
	void WINAPI hk_Color3f(GLfloat red, GLfloat green, GLfloat blue);
	void WINAPI hk_Color3fv(const GLfloat* v);
	void WINAPI hk_Color3i(GLint red, GLint green, GLint blue);
	void WINAPI hk_Color3iv(const GLint* v);
	void WINAPI hk_Color3s(GLshort red, GLshort green, GLshort blue);
	void WINAPI hk_Color3sv(const GLshort* v);
	void WINAPI hk_Color3ub(GLubyte red, GLubyte green, GLubyte blue);
	void WINAPI hk_Color3ubv(const GLubyte* v);
	void WINAPI hk_Color3ui(GLuint red, GLuint green, GLuint blue);
	void WINAPI hk_Color3uiv(const GLuint* v);
	void WINAPI hk_Color3us(GLushort red, GLushort green, GLushort blue);
	void WINAPI hk_Color3usv(const GLushort* v);
	void WINAPI hk_Color4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
	void WINAPI hk_Color4bv(const GLbyte* v);
	void WINAPI hk_Color4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
	void WINAPI hk_Color4dv(const GLdouble* v);
	void WINAPI hk_Color4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	void WINAPI hk_Color4fv(const GLfloat* v);
	void WINAPI hk_Color4i(GLint red, GLint green, GLint blue, GLint alpha);
	void WINAPI hk_Color4iv(const GLint* v);
	void WINAPI hk_Color4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);
	void WINAPI hk_Color4sv(const GLshort* v);
	void WINAPI hk_Color4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
	void WINAPI hk_Color4ubv(const GLubyte* v);
	void WINAPI hk_Color4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);
	void WINAPI hk_Color4uiv(const GLuint* v);
	void WINAPI hk_Color4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);
	void WINAPI hk_Color4usv(const GLushort* v);
	void WINAPI hk_ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
	void WINAPI hk_ColorMaterial(GLenum face, GLenum mode);
	void WINAPI hk_ColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
	void WINAPI hk_CopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
	void WINAPI hk_CopyTexImage1D(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border);
	void WINAPI hk_CopyTexImage2D(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
	void WINAPI hk_CopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
	void WINAPI hk_CopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	void WINAPI hk_CullFace(GLenum mode);
	GLint WINAPI hk_DebugEntry(GLint unknown1, GLint unknown2);
	void WINAPI hk_DeleteLists(GLuint list, GLsizei range);
	void WINAPI hk_DeleteTextures(GLsizei n, const GLuint* textures);
	void WINAPI hk_DepthFunc(GLenum func);
	void WINAPI hk_DepthMask(GLboolean flag);
	void WINAPI hk_DepthRange(GLclampd zNear, GLclampd zFar);
	void WINAPI hk_Disable(GLenum cap);
	void WINAPI hk_DisableClientState(GLenum array);
	void WINAPI hk_DrawArrays(GLenum mode, GLint first, GLsizei count);
	void WINAPI hk_DrawBuffer(GLenum mode);
	void WINAPI hk_DrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid* indices);
	void WINAPI hk_DrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels);
	void WINAPI hk_EdgeFlag(GLboolean flag);
	void WINAPI hk_EdgeFlagPointer(GLsizei stride, const GLvoid* pointer);
	void WINAPI hk_EdgeFlagv(const GLboolean* flag);
	void WINAPI hk_Enable(GLenum cap);
	void WINAPI hk_EnableClientState(GLenum array);
	void WINAPI hk_End(void);
	void WINAPI hk_EndList(void);
	void WINAPI hk_EvalCoord1d(GLdouble u);
	void WINAPI hk_EvalCoord1dv(const GLdouble* u);
	void WINAPI hk_EvalCoord1f(GLfloat u);
	void WINAPI hk_EvalCoord1fv(const GLfloat* u);
	void WINAPI hk_EvalCoord2d(GLdouble u, GLdouble v);
	void WINAPI hk_EvalCoord2dv(const GLdouble* u);
	void WINAPI hk_EvalCoord2f(GLfloat u, GLfloat v);
	void WINAPI hk_EvalCoord2fv(const GLfloat* u);
	void WINAPI hk_EvalMesh1(GLenum mode, GLint i1, GLint i2);
	void WINAPI hk_EvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
	void WINAPI hk_EvalPoint1(GLint i);
	void WINAPI hk_EvalPoint2(GLint i, GLint j);
	void WINAPI hk_FeedbackBuffer(GLsizei size, GLenum type, GLfloat* buffer);
	void WINAPI hk_Finish(void);
	void WINAPI hk_Flush(void);
	void WINAPI hk_Fogf(GLenum pname, GLfloat param);
	void WINAPI hk_Fogfv(GLenum pname, const GLfloat* params);
	void WINAPI hk_Fogi(GLenum pname, GLint param);
	void WINAPI hk_Fogiv(GLenum pname, const GLint* params);
	void WINAPI hk_FrontFace(GLenum mode);
	void WINAPI hk_Frustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
	GLuint WINAPI hk_GenLists(GLsizei range);
	void WINAPI hk_GenTextures(GLsizei n, GLuint* textures);
	void WINAPI hk_GetBooleanv(GLenum pname, GLboolean* params);
	void WINAPI hk_GetClipPlane(GLenum plane, GLdouble* equation);
	void WINAPI hk_GetDoublev(GLenum pname, GLdouble* params);
	GLenum WINAPI hk_GetError(void);
	void WINAPI hk_GetFloatv(GLenum pname, GLfloat* params);
	void WINAPI hk_GetIntegerv(GLenum pname, GLint* params);
	void WINAPI hk_GetLightfv(GLenum light, GLenum pname, GLfloat* params);
	void WINAPI hk_GetLightiv(GLenum light, GLenum pname, GLint* params);
	void WINAPI hk_GetMapdv(GLenum target, GLenum query, GLdouble* v);
	void WINAPI hk_GetMapfv(GLenum target, GLenum query, GLfloat* v);
	void WINAPI hk_GetMapiv(GLenum target, GLenum query, GLint* v);
	void WINAPI hk_GetMaterialfv(GLenum face, GLenum pname, GLfloat* params);
	void WINAPI hk_GetMaterialiv(GLenum face, GLenum pname, GLint* params);
	void WINAPI hk_GetPixelMapfv(GLenum map, GLfloat* values);
	void WINAPI hk_GetPixelMapuiv(GLenum map, GLuint* values);
	void WINAPI hk_GetPixelMapusv(GLenum map, GLushort* values);
	void WINAPI hk_GetPointerv(GLenum pname, GLvoid** params);
	void WINAPI hk_GetPolygonStipple(GLubyte* mask);
	const GLubyte* WINAPI hk_GetString(GLenum name);
	void WINAPI hk_GetTexEnvfv(GLenum target, GLenum pname, GLfloat* params);
	void WINAPI hk_GetTexEnviv(GLenum target, GLenum pname, GLint* params);
	void WINAPI hk_GetTexGendv(GLenum coord, GLenum pname, GLdouble* params);
	void WINAPI hk_GetTexGenfv(GLenum coord, GLenum pname, GLfloat* params);
	void WINAPI hk_GetTexGeniv(GLenum coord, GLenum pname, GLint* params);
	void WINAPI hk_GetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid* pixels);
	void WINAPI hk_GetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat* params);
	void WINAPI hk_GetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint* params);
	void WINAPI hk_GetTexParameterfv(GLenum target, GLenum pname, GLfloat* params);
	void WINAPI hk_GetTexParameteriv(GLenum target, GLenum pname, GLint* params);
	void WINAPI hk_Hint(GLenum target, GLenum mode);
	void WINAPI hk_IndexMask(GLuint mask);
	void WINAPI hk_IndexPointer(GLenum type, GLsizei stride, const GLvoid* pointer);
	void WINAPI hk_Indexd(GLdouble c);
	void WINAPI hk_Indexdv(const GLdouble* c);
	void WINAPI hk_Indexf(GLfloat c);
	void WINAPI hk_Indexfv(const GLfloat* c);
	void WINAPI hk_Indexi(GLint c);
	void WINAPI hk_Indexiv(const GLint* c);
	void WINAPI hk_Indexs(GLshort c);
	void WINAPI hk_Indexsv(const GLshort* c);
	void WINAPI hk_Indexub(GLubyte c);
	void WINAPI hk_Indexubv(const GLubyte* c);
	void WINAPI hk_InitNames(void);
	void WINAPI hk_InterleavedArrays(GLenum format, GLsizei stride, const GLvoid* pointer);
	GLboolean WINAPI hk_IsEnabled(GLenum cap);
	GLboolean WINAPI hk_IsList(GLuint list);
	GLboolean WINAPI hk_IsTexture(GLuint texture);
	void WINAPI hk_LightModelf(GLenum pname, GLfloat param);
	void WINAPI hk_LightModelfv(GLenum pname, const GLfloat* params);
	void WINAPI hk_LightModeli(GLenum pname, GLint param);
	void WINAPI hk_LightModeliv(GLenum pname, const GLint* params);
	void WINAPI hk_Lightf(GLenum light, GLenum pname, GLfloat param);
	void WINAPI hk_Lightfv(GLenum light, GLenum pname, const GLfloat* params);
	void WINAPI hk_Lighti(GLenum light, GLenum pname, GLint param);
	void WINAPI hk_Lightiv(GLenum light, GLenum pname, const GLint* params);
	void WINAPI hk_LineStipple(GLint factor, GLushort pattern);
	void WINAPI hk_LineWidth(GLfloat width);
	void WINAPI hk_ListBase(GLuint base);
	void WINAPI hk_LoadIdentity(void);
	void WINAPI hk_LoadMatrixd(const GLdouble* m);
	void WINAPI hk_LoadMatrixf(const GLfloat* m);
	void WINAPI hk_LoadName(GLuint name);
	void WINAPI hk_LogicOp(GLenum opcode);
	void WINAPI hk_Map1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points);
	void WINAPI hk_Map1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points);
	void WINAPI hk_Map2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points);
	void WINAPI hk_Map2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points);
	void WINAPI hk_MapGrid1d(GLint un, GLdouble u1, GLdouble u2);
	void WINAPI hk_MapGrid1f(GLint un, GLfloat u1, GLfloat u2);
	void WINAPI hk_MapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
	void WINAPI hk_MapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
	void WINAPI hk_Materialf(GLenum face, GLenum pname, GLfloat param);
	void WINAPI hk_Materialfv(GLenum face, GLenum pname, const GLfloat* params);
	void WINAPI hk_Materiali(GLenum face, GLenum pname, GLint param);
	void WINAPI hk_Materialiv(GLenum face, GLenum pname, const GLint* params);
	void WINAPI hk_MatrixMode(GLenum mode);
	void WINAPI hk_MultMatrixd(const GLdouble* m);
	void WINAPI hk_MultMatrixf(const GLfloat* m);
	void WINAPI hk_NewList(GLuint list, GLenum mode);
	void WINAPI hk_Normal3b(GLbyte nx, GLbyte ny, GLbyte nz);
	void WINAPI hk_Normal3bv(const GLbyte* v);
	void WINAPI hk_Normal3d(GLdouble nx, GLdouble ny, GLdouble nz);
	void WINAPI hk_Normal3dv(const GLdouble* v);
	void WINAPI hk_Normal3f(GLfloat nx, GLfloat ny, GLfloat nz);
	void WINAPI hk_Normal3fv(const GLfloat* v);
	void WINAPI hk_Normal3i(GLint nx, GLint ny, GLint nz);
	void WINAPI hk_Normal3iv(const GLint* v);
	void WINAPI hk_Normal3s(GLshort nx, GLshort ny, GLshort nz);
	void WINAPI hk_Normal3sv(const GLshort* v);
	void WINAPI hk_NormalPointer(GLenum type, GLsizei stride, const GLvoid* pointer);
	void WINAPI hk_Ortho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
	void WINAPI hk_PassThrough(GLfloat token);
	void WINAPI hk_PixelMapfv(GLenum map, GLsizei mapsize, const GLfloat* values);
	void WINAPI hk_PixelMapuiv(GLenum map, GLsizei mapsize, const GLuint* values);
	void WINAPI hk_PixelMapusv(GLenum map, GLsizei mapsize, const GLushort* values);
	void WINAPI hk_PixelStoref(GLenum pname, GLfloat param);
	void WINAPI hk_PixelStorei(GLenum pname, GLint param);
	void WINAPI hk_PixelTransferf(GLenum pname, GLfloat param);
	void WINAPI hk_PixelTransferi(GLenum pname, GLint param);
	void WINAPI hk_PixelZoom(GLfloat xfactor, GLfloat yfactor);
	void WINAPI hk_PointSize(GLfloat size);
	void WINAPI hk_PolygonMode(GLenum face, GLenum mode);
	void WINAPI hk_PolygonOffset(GLfloat factor, GLfloat units);
	void WINAPI hk_PolygonStipple(const GLubyte* mask);
	void WINAPI hk_PopAttrib(void);
	void WINAPI hk_PopClientAttrib(void);
	void WINAPI hk_PopMatrix(void);
	void WINAPI hk_PopName(void);
	void WINAPI hk_PrioritizeTextures(GLsizei n, const GLuint* textures, const GLclampf* priorities);
	void WINAPI hk_PushAttrib(GLbitfield mask);
	void WINAPI hk_PushClientAttrib(GLbitfield mask);
	void WINAPI hk_PushMatrix(void);
	void WINAPI hk_PushName(GLuint name);
	void WINAPI hk_RasterPos2d(GLdouble x, GLdouble y);
	void WINAPI hk_RasterPos2dv(const GLdouble* v);
	void WINAPI hk_RasterPos2f(GLfloat x, GLfloat y);
	void WINAPI hk_RasterPos2fv(const GLfloat* v);
	void WINAPI hk_RasterPos2i(GLint x, GLint y);
	void WINAPI hk_RasterPos2iv(const GLint* v);
	void WINAPI hk_RasterPos2s(GLshort x, GLshort y);
	void WINAPI hk_RasterPos2sv(const GLshort* v);
	void WINAPI hk_RasterPos3d(GLdouble x, GLdouble y, GLdouble z);
	void WINAPI hk_RasterPos3dv(const GLdouble* v);
	void WINAPI hk_RasterPos3f(GLfloat x, GLfloat y, GLfloat z);
	void WINAPI hk_RasterPos3fv(const GLfloat* v);
	void WINAPI hk_RasterPos3i(GLint x, GLint y, GLint z);
	void WINAPI hk_RasterPos3iv(const GLint* v);
	void WINAPI hk_RasterPos3s(GLshort x, GLshort y, GLshort z);
	void WINAPI hk_RasterPos3sv(const GLshort* v);
	void WINAPI hk_RasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void WINAPI hk_RasterPos4dv(const GLdouble* v);
	void WINAPI hk_RasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void WINAPI hk_RasterPos4fv(const GLfloat* v);
	void WINAPI hk_RasterPos4i(GLint x, GLint y, GLint z, GLint w);
	void WINAPI hk_RasterPos4iv(const GLint* v);
	void WINAPI hk_RasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
	void WINAPI hk_RasterPos4sv(const GLshort* v);
	void WINAPI hk_ReadBuffer(GLenum mode);
	void WINAPI hk_ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels);
	void WINAPI hk_Rectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
	void WINAPI hk_Rectdv(const GLdouble* v1, const GLdouble* v2);
	void WINAPI hk_Rectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
	void WINAPI hk_Rectfv(const GLfloat* v1, const GLfloat* v2);
	void WINAPI hk_Recti(GLint x1, GLint y1, GLint x2, GLint y2);
	void WINAPI hk_Rectiv(const GLint* v1, const GLint* v2);
	void WINAPI hk_Rects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
	void WINAPI hk_Rectsv(const GLshort* v1, const GLshort* v2);
	GLint WINAPI hk_RenderMode(GLenum mode);
	void WINAPI hk_Rotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
	void WINAPI hk_Rotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
	void WINAPI hk_Scaled(GLdouble x, GLdouble y, GLdouble z);
	void WINAPI hk_Scalef(GLfloat x, GLfloat y, GLfloat z);
	void WINAPI hk_Scissor(GLint x, GLint y, GLsizei width, GLsizei height);
	void WINAPI hk_SelectBuffer(GLsizei size, GLuint* buffer);
	void WINAPI hk_ShadeModel(GLenum mode);
	void WINAPI hk_StencilFunc(GLenum func, GLint ref, GLuint mask);
	void WINAPI hk_StencilMask(GLuint mask);
	void WINAPI hk_StencilOp(GLenum fail, GLenum zfail, GLenum zpass);
	void WINAPI hk_TexCoord1d(GLdouble s);
	void WINAPI hk_TexCoord1dv(const GLdouble* v);
	void WINAPI hk_TexCoord1f(GLfloat s);
	void WINAPI hk_TexCoord1fv(const GLfloat* v);
	void WINAPI hk_TexCoord1i(GLint s);
	void WINAPI hk_TexCoord1iv(const GLint* v);
	void WINAPI hk_TexCoord1s(GLshort s);
	void WINAPI hk_TexCoord1sv(const GLshort* v);
	void WINAPI hk_TexCoord2d(GLdouble s, GLdouble t);
	void WINAPI hk_TexCoord2dv(const GLdouble* v);
	void WINAPI hk_TexCoord2f(GLfloat s, GLfloat t);
	void WINAPI hk_TexCoord2fv(const GLfloat* v);
	void WINAPI hk_TexCoord2i(GLint s, GLint t);
	void WINAPI hk_TexCoord2iv(const GLint* v);
	void WINAPI hk_TexCoord2s(GLshort s, GLshort t);
	void WINAPI hk_TexCoord2sv(const GLshort* v);
	void WINAPI hk_TexCoord3d(GLdouble s, GLdouble t, GLdouble r);
	void WINAPI hk_TexCoord3dv(const GLdouble* v);
	void WINAPI hk_TexCoord3f(GLfloat s, GLfloat t, GLfloat r);
	void WINAPI hk_TexCoord3fv(const GLfloat* v);
	void WINAPI hk_TexCoord3i(GLint s, GLint t, GLint r);
	void WINAPI hk_TexCoord3iv(const GLint* v);
	void WINAPI hk_TexCoord3s(GLshort s, GLshort t, GLshort r);
	void WINAPI hk_TexCoord3sv(const GLshort* v);
	void WINAPI hk_TexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	void WINAPI hk_TexCoord4dv(const GLdouble* v);
	void WINAPI hk_TexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	void WINAPI hk_TexCoord4fv(const GLfloat* v);
	void WINAPI hk_TexCoord4i(GLint s, GLint t, GLint r, GLint q);
	void WINAPI hk_TexCoord4iv(const GLint* v);
	void WINAPI hk_TexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);
	void WINAPI hk_TexCoord4sv(const GLshort* v);
	void WINAPI hk_TexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
	void WINAPI hk_TexEnvf(GLenum target, GLenum pname, GLfloat param);
	void WINAPI hk_TexEnvfv(GLenum target, GLenum pname, const GLfloat* params);
	void WINAPI hk_TexEnvi(GLenum target, GLenum pname, GLint param);
	void WINAPI hk_TexEnviv(GLenum target, GLenum pname, const GLint* params);
	void WINAPI hk_TexGend(GLenum coord, GLenum pname, GLdouble param);
	void WINAPI hk_TexGendv(GLenum coord, GLenum pname, const GLdouble* params);
	void WINAPI hk_TexGenf(GLenum coord, GLenum pname, GLfloat param);
	void WINAPI hk_TexGenfv(GLenum coord, GLenum pname, const GLfloat* params);
	void WINAPI hk_TexGeni(GLenum coord, GLenum pname, GLint param);
	void WINAPI hk_TexGeniv(GLenum coord, GLenum pname, const GLint* params);
	void WINAPI hk_TexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
	void WINAPI hk_TexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
	void WINAPI hk_TexParameterf(GLenum target, GLenum pname, GLfloat param);
	void WINAPI hk_TexParameterfv(GLenum target, GLenum pname, const GLfloat* params);
	void WINAPI hk_TexParameteri(GLenum target, GLenum pname, GLint param);
	void WINAPI hk_TexParameteriv(GLenum target, GLenum pname, const GLint* params);
	void WINAPI hk_TexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels);
	void WINAPI hk_TexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels);
	void WINAPI hk_Translated(GLdouble x, GLdouble y, GLdouble z);
	void WINAPI hk_Translatef(GLfloat x, GLfloat y, GLfloat z);
	void WINAPI hk_Vertex2d(GLdouble x, GLdouble y);
	void WINAPI hk_Vertex2dv(const GLdouble* v);
	void WINAPI hk_Vertex2f(GLfloat x, GLfloat y);
	void WINAPI hk_Vertex2fv(const GLfloat* v);
	void WINAPI hk_Vertex2i(GLint x, GLint y);
	void WINAPI hk_Vertex2iv(const GLint* v);
	void WINAPI hk_Vertex2s(GLshort x, GLshort y);
	void WINAPI hk_Vertex2sv(const GLshort* v);
	void WINAPI hk_Vertex3d(GLdouble x, GLdouble y, GLdouble z);
	void WINAPI hk_Vertex3dv(const GLdouble* v);
	void WINAPI hk_Vertex3f(GLfloat x, GLfloat y, GLfloat z);
	void WINAPI hk_Vertex3fv(const GLfloat* v);
	void WINAPI hk_Vertex3i(GLint x, GLint y, GLint z);
	void WINAPI hk_Vertex3iv(const GLint* v);
	void WINAPI hk_Vertex3s(GLshort x, GLshort y, GLshort z);
	void WINAPI hk_Vertex3sv(const GLshort* v);
	void WINAPI hk_Vertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void WINAPI hk_Vertex4dv(const GLdouble* v);
	void WINAPI hk_Vertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void WINAPI hk_Vertex4fv(const GLfloat* v);
	void WINAPI hk_Vertex4i(GLint x, GLint y, GLint z, GLint w);
	void WINAPI hk_Vertex4iv(const GLint* v);
	void WINAPI hk_Vertex4s(GLshort x, GLshort y, GLshort z, GLshort w);
	void WINAPI hk_Vertex4sv(const GLshort* v);
	void WINAPI hk_VertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
	void WINAPI hk_Viewport(GLint x, GLint y, GLsizei width, GLsizei height);

	extern decltype(&hk_Accum) fn_Accum;
	extern decltype(&hk_AlphaFunc) fn_AlphaFunc;
	extern decltype(&hk_AreTexturesResident) fn_AreTexturesResident;
	extern decltype(&hk_ArrayElement) fn_ArrayElement;
	extern decltype(&hk_Begin) fn_Begin;
	extern decltype(&hk_BindTexture) fn_BindTexture;
	extern decltype(&hk_Bitmap) fn_Bitmap;
	extern decltype(&hk_BlendFunc) fn_BlendFunc;
	extern decltype(&hk_CallList) fn_CallList;
	extern decltype(&hk_CallLists) fn_CallLists;
	extern decltype(&hk_Clear) fn_Clear;
	extern decltype(&hk_ClearAccum) fn_ClearAccum;
	extern decltype(&hk_ClearColor) fn_ClearColor;
	extern decltype(&hk_ClearDepth) fn_ClearDepth;
	extern decltype(&hk_ClearIndex) fn_ClearIndex;
	extern decltype(&hk_ClearStencil) fn_ClearStencil;
	extern decltype(&hk_ClipPlane) fn_ClipPlane;
	extern decltype(&hk_Color3b) fn_Color3b;
	extern decltype(&hk_Color3bv) fn_Color3bv;
	extern decltype(&hk_Color3d) fn_Color3d;
	extern decltype(&hk_Color3dv) fn_Color3dv;
	extern decltype(&hk_Color3f) fn_Color3f;
	extern decltype(&hk_Color3fv) fn_Color3fv;
	extern decltype(&hk_Color3i) fn_Color3i;
	extern decltype(&hk_Color3iv) fn_Color3iv;
	extern decltype(&hk_Color3s) fn_Color3s;
	extern decltype(&hk_Color3sv) fn_Color3sv;
	extern decltype(&hk_Color3ub) fn_Color3ub;
	extern decltype(&hk_Color3ubv) fn_Color3ubv;
	extern decltype(&hk_Color3ui) fn_Color3ui;
	extern decltype(&hk_Color3uiv) fn_Color3uiv;
	extern decltype(&hk_Color3us) fn_Color3us;
	extern decltype(&hk_Color3usv) fn_Color3usv;
	extern decltype(&hk_Color4b) fn_Color4b;
	extern decltype(&hk_Color4bv) fn_Color4bv;
	extern decltype(&hk_Color4d) fn_Color4d;
	extern decltype(&hk_Color4dv) fn_Color4dv;
	extern decltype(&hk_Color4f) fn_Color4f;
	extern decltype(&hk_Color4fv) fn_Color4fv;
	extern decltype(&hk_Color4i) fn_Color4i;
	extern decltype(&hk_Color4iv) fn_Color4iv;
	extern decltype(&hk_Color4s) fn_Color4s;
	extern decltype(&hk_Color4sv) fn_Color4sv;
	extern decltype(&hk_Color4ub) fn_Color4ub;
	extern decltype(&hk_Color4ubv) fn_Color4ubv;
	extern decltype(&hk_Color4ui) fn_Color4ui;
	extern decltype(&hk_Color4uiv) fn_Color4uiv;
	extern decltype(&hk_Color4us) fn_Color4us;
	extern decltype(&hk_Color4usv) fn_Color4usv;
	extern decltype(&hk_ColorMask) fn_ColorMask;
	extern decltype(&hk_ColorMaterial) fn_ColorMaterial;
	extern decltype(&hk_ColorPointer) fn_ColorPointer;
	extern decltype(&hk_CopyPixels) fn_CopyPixels;
	extern decltype(&hk_CopyTexImage1D) fn_CopyTexImage1D;
	extern decltype(&hk_CopyTexImage2D) fn_CopyTexImage2D;
	extern decltype(&hk_CopyTexSubImage1D) fn_CopyTexSubImage1D;
	extern decltype(&hk_CopyTexSubImage2D) fn_CopyTexSubImage2D;
	extern decltype(&hk_CullFace) fn_CullFace;
	extern decltype(&hk_DebugEntry) fn_DebugEntry;
	extern decltype(&hk_DeleteLists) fn_DeleteLists;
	extern decltype(&hk_DeleteTextures) fn_DeleteTextures;
	extern decltype(&hk_DepthFunc) fn_DepthFunc;
	extern decltype(&hk_DepthMask) fn_DepthMask;
	extern decltype(&hk_DepthRange) fn_DepthRange;
	extern decltype(&hk_Disable) fn_Disable;
	extern decltype(&hk_DisableClientState) fn_DisableClientState;
	extern decltype(&hk_DrawArrays) fn_DrawArrays;
	extern decltype(&hk_DrawBuffer) fn_DrawBuffer;
	extern decltype(&hk_DrawElements) fn_DrawElements;
	extern decltype(&hk_DrawPixels) fn_DrawPixels;
	extern decltype(&hk_EdgeFlag) fn_EdgeFlag;
	extern decltype(&hk_EdgeFlagPointer) fn_EdgeFlagPointer;
	extern decltype(&hk_EdgeFlagv) fn_EdgeFlagv;
	extern decltype(&hk_Enable) fn_Enable;
	extern decltype(&hk_EnableClientState) fn_EnableClientState;
	extern decltype(&hk_End) fn_End;
	extern decltype(&hk_EndList) fn_EndList;
	extern decltype(&hk_EvalCoord1d) fn_EvalCoord1d;
	extern decltype(&hk_EvalCoord1dv) fn_EvalCoord1dv;
	extern decltype(&hk_EvalCoord1f) fn_EvalCoord1f;
	extern decltype(&hk_EvalCoord1fv) fn_EvalCoord1fv;
	extern decltype(&hk_EvalCoord2d) fn_EvalCoord2d;
	extern decltype(&hk_EvalCoord2dv) fn_EvalCoord2dv;
	extern decltype(&hk_EvalCoord2f) fn_EvalCoord2f;
	extern decltype(&hk_EvalCoord2fv) fn_EvalCoord2fv;
	extern decltype(&hk_EvalMesh1) fn_EvalMesh1;
	extern decltype(&hk_EvalMesh2) fn_EvalMesh2;
	extern decltype(&hk_EvalPoint1) fn_EvalPoint1;
	extern decltype(&hk_EvalPoint2) fn_EvalPoint2;
	extern decltype(&hk_FeedbackBuffer) fn_FeedbackBuffer;
	extern decltype(&hk_Finish) fn_Finish;
	extern decltype(&hk_Flush) fn_Flush;
	extern decltype(&hk_Fogf) fn_Fogf;
	extern decltype(&hk_Fogfv) fn_Fogfv;
	extern decltype(&hk_Fogi) fn_Fogi;
	extern decltype(&hk_Fogiv) fn_Fogiv;
	extern decltype(&hk_FrontFace) fn_FrontFace;
	extern decltype(&hk_Frustum) fn_Frustum;
	extern decltype(&hk_GenLists) fn_GenLists;
	extern decltype(&hk_GenTextures) fn_GenTextures;
	extern decltype(&hk_GetBooleanv) fn_GetBooleanv;
	extern decltype(&hk_GetClipPlane) fn_GetClipPlane;
	extern decltype(&hk_GetDoublev) fn_GetDoublev;
	extern decltype(&hk_GetError) fn_GetError;
	extern decltype(&hk_GetFloatv) fn_GetFloatv;
	extern decltype(&hk_GetIntegerv) fn_GetIntegerv;
	extern decltype(&hk_GetLightfv) fn_GetLightfv;
	extern decltype(&hk_GetLightiv) fn_GetLightiv;
	extern decltype(&hk_GetMapdv) fn_GetMapdv;
	extern decltype(&hk_GetMapfv) fn_GetMapfv;
	extern decltype(&hk_GetMapiv) fn_GetMapiv;
	extern decltype(&hk_GetMaterialfv) fn_GetMaterialfv;
	extern decltype(&hk_GetMaterialiv) fn_GetMaterialiv;
	extern decltype(&hk_GetPixelMapfv) fn_GetPixelMapfv;
	extern decltype(&hk_GetPixelMapuiv) fn_GetPixelMapuiv;
	extern decltype(&hk_GetPixelMapusv) fn_GetPixelMapusv;
	extern decltype(&hk_GetPointerv) fn_GetPointerv;
	extern decltype(&hk_GetPolygonStipple) fn_GetPolygonStipple;
	extern decltype(&hk_GetString) fn_GetString;
	extern decltype(&hk_GetTexEnvfv) fn_GetTexEnvfv;
	extern decltype(&hk_GetTexEnviv) fn_GetTexEnviv;
	extern decltype(&hk_GetTexGendv) fn_GetTexGendv;
	extern decltype(&hk_GetTexGenfv) fn_GetTexGenfv;
	extern decltype(&hk_GetTexGeniv) fn_GetTexGeniv;
	extern decltype(&hk_GetTexImage) fn_GetTexImage;
	extern decltype(&hk_GetTexLevelParameterfv) fn_GetTexLevelParameterfv;
	extern decltype(&hk_GetTexLevelParameteriv) fn_GetTexLevelParameteriv;
	extern decltype(&hk_GetTexParameterfv) fn_GetTexParameterfv;
	extern decltype(&hk_GetTexParameteriv) fn_GetTexParameteriv;
	extern decltype(&hk_Hint) fn_Hint;
	extern decltype(&hk_IndexMask) fn_IndexMask;
	extern decltype(&hk_IndexPointer) fn_IndexPointer;
	extern decltype(&hk_Indexd) fn_Indexd;
	extern decltype(&hk_Indexdv) fn_Indexdv;
	extern decltype(&hk_Indexf) fn_Indexf;
	extern decltype(&hk_Indexfv) fn_Indexfv;
	extern decltype(&hk_Indexi) fn_Indexi;
	extern decltype(&hk_Indexiv) fn_Indexiv;
	extern decltype(&hk_Indexs) fn_Indexs;
	extern decltype(&hk_Indexsv) fn_Indexsv;
	extern decltype(&hk_Indexub) fn_Indexub;
	extern decltype(&hk_Indexubv) fn_Indexubv;
	extern decltype(&hk_InitNames) fn_InitNames;
	extern decltype(&hk_InterleavedArrays) fn_InterleavedArrays;
	extern decltype(&hk_IsEnabled) fn_IsEnabled;
	extern decltype(&hk_IsList) fn_IsList;
	extern decltype(&hk_IsTexture) fn_IsTexture;
	extern decltype(&hk_LightModelf) fn_LightModelf;
	extern decltype(&hk_LightModelfv) fn_LightModelfv;
	extern decltype(&hk_LightModeli) fn_LightModeli;
	extern decltype(&hk_LightModeliv) fn_LightModeliv;
	extern decltype(&hk_Lightf) fn_Lightf;
	extern decltype(&hk_Lightfv) fn_Lightfv;
	extern decltype(&hk_Lighti) fn_Lighti;
	extern decltype(&hk_Lightiv) fn_Lightiv;
	extern decltype(&hk_LineStipple) fn_LineStipple;
	extern decltype(&hk_LineWidth) fn_LineWidth;
	extern decltype(&hk_ListBase) fn_ListBase;
	extern decltype(&hk_LoadIdentity) fn_LoadIdentity;
	extern decltype(&hk_LoadMatrixd) fn_LoadMatrixd;
	extern decltype(&hk_LoadMatrixf) fn_LoadMatrixf;
	extern decltype(&hk_LoadName) fn_LoadName;
	extern decltype(&hk_LogicOp) fn_LogicOp;
	extern decltype(&hk_Map1d) fn_Map1d;
	extern decltype(&hk_Map1f) fn_Map1f;
	extern decltype(&hk_Map2d) fn_Map2d;
	extern decltype(&hk_Map2f) fn_Map2f;
	extern decltype(&hk_MapGrid1d) fn_MapGrid1d;
	extern decltype(&hk_MapGrid1f) fn_MapGrid1f;
	extern decltype(&hk_MapGrid2d) fn_MapGrid2d;
	extern decltype(&hk_MapGrid2f) fn_MapGrid2f;
	extern decltype(&hk_Materialf) fn_Materialf;
	extern decltype(&hk_Materialfv) fn_Materialfv;
	extern decltype(&hk_Materiali) fn_Materiali;
	extern decltype(&hk_Materialiv) fn_Materialiv;
	extern decltype(&hk_MatrixMode) fn_MatrixMode;
	extern decltype(&hk_MultMatrixd) fn_MultMatrixd;
	extern decltype(&hk_MultMatrixf) fn_MultMatrixf;
	extern decltype(&hk_NewList) fn_NewList;
	extern decltype(&hk_Normal3b) fn_Normal3b;
	extern decltype(&hk_Normal3bv) fn_Normal3bv;
	extern decltype(&hk_Normal3d) fn_Normal3d;
	extern decltype(&hk_Normal3dv) fn_Normal3dv;
	extern decltype(&hk_Normal3f) fn_Normal3f;
	extern decltype(&hk_Normal3fv) fn_Normal3fv;
	extern decltype(&hk_Normal3i) fn_Normal3i;
	extern decltype(&hk_Normal3iv) fn_Normal3iv;
	extern decltype(&hk_Normal3s) fn_Normal3s;
	extern decltype(&hk_Normal3sv) fn_Normal3sv;
	extern decltype(&hk_NormalPointer) fn_NormalPointer;
	extern decltype(&hk_Ortho) fn_Ortho;
	extern decltype(&hk_PassThrough) fn_PassThrough;
	extern decltype(&hk_PixelMapfv) fn_PixelMapfv;
	extern decltype(&hk_PixelMapuiv) fn_PixelMapuiv;
	extern decltype(&hk_PixelMapusv) fn_PixelMapusv;
	extern decltype(&hk_PixelStoref) fn_PixelStoref;
	extern decltype(&hk_PixelStorei) fn_PixelStorei;
	extern decltype(&hk_PixelTransferf) fn_PixelTransferf;
	extern decltype(&hk_PixelTransferi) fn_PixelTransferi;
	extern decltype(&hk_PixelZoom) fn_PixelZoom;
	extern decltype(&hk_PointSize) fn_PointSize;
	extern decltype(&hk_PolygonMode) fn_PolygonMode;
	extern decltype(&hk_PolygonOffset) fn_PolygonOffset;
	extern decltype(&hk_PolygonStipple) fn_PolygonStipple;
	extern decltype(&hk_PopAttrib) fn_PopAttrib;
	extern decltype(&hk_PopClientAttrib) fn_PopClientAttrib;
	extern decltype(&hk_PopMatrix) fn_PopMatrix;
	extern decltype(&hk_PopName) fn_PopName;
	extern decltype(&hk_PrioritizeTextures) fn_PrioritizeTextures;
	extern decltype(&hk_PushAttrib) fn_PushAttrib;
	extern decltype(&hk_PushClientAttrib) fn_PushClientAttrib;
	extern decltype(&hk_PushMatrix) fn_PushMatrix;
	extern decltype(&hk_PushName) fn_PushName;
	extern decltype(&hk_RasterPos2d) fn_RasterPos2d;
	extern decltype(&hk_RasterPos2dv) fn_RasterPos2dv;
	extern decltype(&hk_RasterPos2f) fn_RasterPos2f;
	extern decltype(&hk_RasterPos2fv) fn_RasterPos2fv;
	extern decltype(&hk_RasterPos2i) fn_RasterPos2i;
	extern decltype(&hk_RasterPos2iv) fn_RasterPos2iv;
	extern decltype(&hk_RasterPos2s) fn_RasterPos2s;
	extern decltype(&hk_RasterPos2sv) fn_RasterPos2sv;
	extern decltype(&hk_RasterPos3d) fn_RasterPos3d;
	extern decltype(&hk_RasterPos3dv) fn_RasterPos3dv;
	extern decltype(&hk_RasterPos3f) fn_RasterPos3f;
	extern decltype(&hk_RasterPos3fv) fn_RasterPos3fv;
	extern decltype(&hk_RasterPos3i) fn_RasterPos3i;
	extern decltype(&hk_RasterPos3iv) fn_RasterPos3iv;
	extern decltype(&hk_RasterPos3s) fn_RasterPos3s;
	extern decltype(&hk_RasterPos3sv) fn_RasterPos3sv;
	extern decltype(&hk_RasterPos4d) fn_RasterPos4d;
	extern decltype(&hk_RasterPos4dv) fn_RasterPos4dv;
	extern decltype(&hk_RasterPos4f) fn_RasterPos4f;
	extern decltype(&hk_RasterPos4fv) fn_RasterPos4fv;
	extern decltype(&hk_RasterPos4i) fn_RasterPos4i;
	extern decltype(&hk_RasterPos4iv) fn_RasterPos4iv;
	extern decltype(&hk_RasterPos4s) fn_RasterPos4s;
	extern decltype(&hk_RasterPos4sv) fn_RasterPos4sv;
	extern decltype(&hk_ReadBuffer) fn_ReadBuffer;
	extern decltype(&hk_ReadPixels) fn_ReadPixels;
	extern decltype(&hk_Rectd) fn_Rectd;
	extern decltype(&hk_Rectdv) fn_Rectdv;
	extern decltype(&hk_Rectf) fn_Rectf;
	extern decltype(&hk_Rectfv) fn_Rectfv;
	extern decltype(&hk_Recti) fn_Recti;
	extern decltype(&hk_Rectiv) fn_Rectiv;
	extern decltype(&hk_Rects) fn_Rects;
	extern decltype(&hk_Rectsv) fn_Rectsv;
	extern decltype(&hk_RenderMode) fn_RenderMode;
	extern decltype(&hk_Rotated) fn_Rotated;
	extern decltype(&hk_Rotatef) fn_Rotatef;
	extern decltype(&hk_Scaled) fn_Scaled;
	extern decltype(&hk_Scalef) fn_Scalef;
	extern decltype(&hk_Scissor) fn_Scissor;
	extern decltype(&hk_SelectBuffer) fn_SelectBuffer;
	extern decltype(&hk_ShadeModel) fn_ShadeModel;
	extern decltype(&hk_StencilFunc) fn_StencilFunc;
	extern decltype(&hk_StencilMask) fn_StencilMask;
	extern decltype(&hk_StencilOp) fn_StencilOp;
	extern decltype(&hk_TexCoord1d) fn_TexCoord1d;
	extern decltype(&hk_TexCoord1dv) fn_TexCoord1dv;
	extern decltype(&hk_TexCoord1f) fn_TexCoord1f;
	extern decltype(&hk_TexCoord1fv) fn_TexCoord1fv;
	extern decltype(&hk_TexCoord1i) fn_TexCoord1i;
	extern decltype(&hk_TexCoord1iv) fn_TexCoord1iv;
	extern decltype(&hk_TexCoord1s) fn_TexCoord1s;
	extern decltype(&hk_TexCoord1sv) fn_TexCoord1sv;
	extern decltype(&hk_TexCoord2d) fn_TexCoord2d;
	extern decltype(&hk_TexCoord2dv) fn_TexCoord2dv;
	extern decltype(&hk_TexCoord2f) fn_TexCoord2f;
	extern decltype(&hk_TexCoord2fv) fn_TexCoord2fv;
	extern decltype(&hk_TexCoord2i) fn_TexCoord2i;
	extern decltype(&hk_TexCoord2iv) fn_TexCoord2iv;
	extern decltype(&hk_TexCoord2s) fn_TexCoord2s;
	extern decltype(&hk_TexCoord2sv) fn_TexCoord2sv;
	extern decltype(&hk_TexCoord3d) fn_TexCoord3d;
	extern decltype(&hk_TexCoord3dv) fn_TexCoord3dv;
	extern decltype(&hk_TexCoord3f) fn_TexCoord3f;
	extern decltype(&hk_TexCoord3fv) fn_TexCoord3fv;
	extern decltype(&hk_TexCoord3i) fn_TexCoord3i;
	extern decltype(&hk_TexCoord3iv) fn_TexCoord3iv;
	extern decltype(&hk_TexCoord3s) fn_TexCoord3s;
	extern decltype(&hk_TexCoord3sv) fn_TexCoord3sv;
	extern decltype(&hk_TexCoord4d) fn_TexCoord4d;
	extern decltype(&hk_TexCoord4dv) fn_TexCoord4dv;
	extern decltype(&hk_TexCoord4f) fn_TexCoord4f;
	extern decltype(&hk_TexCoord4fv) fn_TexCoord4fv;
	extern decltype(&hk_TexCoord4i) fn_TexCoord4i;
	extern decltype(&hk_TexCoord4iv) fn_TexCoord4iv;
	extern decltype(&hk_TexCoord4s) fn_TexCoord4s;
	extern decltype(&hk_TexCoord4sv) fn_TexCoord4sv;
	extern decltype(&hk_TexCoordPointer) fn_TexCoordPointer;
	extern decltype(&hk_TexEnvf) fn_TexEnvf;
	extern decltype(&hk_TexEnvfv) fn_TexEnvfv;
	extern decltype(&hk_TexEnvi) fn_TexEnvi;
	extern decltype(&hk_TexEnviv) fn_TexEnviv;
	extern decltype(&hk_TexGend) fn_TexGend;
	extern decltype(&hk_TexGendv) fn_TexGendv;
	extern decltype(&hk_TexGenf) fn_TexGenf;
	extern decltype(&hk_TexGenfv) fn_TexGenfv;
	extern decltype(&hk_TexGeni) fn_TexGeni;
	extern decltype(&hk_TexGeniv) fn_TexGeniv;
	extern decltype(&hk_TexImage1D) fn_TexImage1D;
	extern decltype(&hk_TexImage2D) fn_TexImage2D;
	extern decltype(&hk_TexParameterf) fn_TexParameterf;
	extern decltype(&hk_TexParameterfv) fn_TexParameterfv;
	extern decltype(&hk_TexParameteri) fn_TexParameteri;
	extern decltype(&hk_TexParameteriv) fn_TexParameteriv;
	extern decltype(&hk_TexSubImage1D) fn_TexSubImage1D;
	extern decltype(&hk_TexSubImage2D) fn_TexSubImage2D;
	extern decltype(&hk_Translated) fn_Translated;
	extern decltype(&hk_Translatef) fn_Translatef;
	extern decltype(&hk_Vertex2d) fn_Vertex2d;
	extern decltype(&hk_Vertex2dv) fn_Vertex2dv;
	extern decltype(&hk_Vertex2f) fn_Vertex2f;
	extern decltype(&hk_Vertex2fv) fn_Vertex2fv;
	extern decltype(&hk_Vertex2i) fn_Vertex2i;
	extern decltype(&hk_Vertex2iv) fn_Vertex2iv;
	extern decltype(&hk_Vertex2s) fn_Vertex2s;
	extern decltype(&hk_Vertex2sv) fn_Vertex2sv;
	extern decltype(&hk_Vertex3d) fn_Vertex3d;
	extern decltype(&hk_Vertex3dv) fn_Vertex3dv;
	extern decltype(&hk_Vertex3f) fn_Vertex3f;
	extern decltype(&hk_Vertex3fv) fn_Vertex3fv;
	extern decltype(&hk_Vertex3i) fn_Vertex3i;
	extern decltype(&hk_Vertex3iv) fn_Vertex3iv;
	extern decltype(&hk_Vertex3s) fn_Vertex3s;
	extern decltype(&hk_Vertex3sv) fn_Vertex3sv;
	extern decltype(&hk_Vertex4d) fn_Vertex4d;
	extern decltype(&hk_Vertex4dv) fn_Vertex4dv;
	extern decltype(&hk_Vertex4f) fn_Vertex4f;
	extern decltype(&hk_Vertex4fv) fn_Vertex4fv;
	extern decltype(&hk_Vertex4i) fn_Vertex4i;
	extern decltype(&hk_Vertex4iv) fn_Vertex4iv;
	extern decltype(&hk_Vertex4s) fn_Vertex4s;
	extern decltype(&hk_Vertex4sv) fn_Vertex4sv;
	extern decltype(&hk_VertexPointer) fn_VertexPointer;
	extern decltype(&hk_Viewport) fn_Viewport;
}